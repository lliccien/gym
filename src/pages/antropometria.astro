---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Navigation from '../components/Navigation.astro';
import AnthropometryForm from '../components/antropometria/AnthropometryForm.astro';
import ProgressCharts from '../components/antropometria/ProgressCharts.astro';
import StatsCard from '../components/antropometria/StatsCard.astro';
---

<Layout title="Antropometr√≠a - Gym Tracker">
	<Header />
	<Navigation currentPage="antropometria" />
	
	<main class="container mx-auto px-4 py-6 pb-20">
		<!-- Header Section -->
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-gray-800 mb-2">üìä Antropometr√≠a</h1>
			<p class="text-gray-600">Registra y monitorea tu progreso f√≠sico completo</p>
		</div>

		<!-- Stats Overview -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
			<StatsCard 
				title="√öltimo Registro" 
				value="Hoy" 
				icon="üìÖ" 
				id="last-record-card"
			/>
			<StatsCard 
				title="Peso Actual" 
				value="--" 
				unit="kg" 
				icon="‚öñÔ∏è" 
				id="current-weight-card"
			/>
			<StatsCard 
				title="IMC" 
				value="--" 
				icon="üìä" 
				id="bmi-card"
			/>
		</div>

		<!-- Main Content Tabs -->
		<div class="bg-white rounded-lg shadow-lg">
			<!-- Tab Navigation -->
			<div class="flex border-b border-gray-200">
				<button id="tab-registro" class="tab-button active px-6 py-3 text-sm font-medium border-b-2 border-blue-500 text-blue-600">
					üìù Registro
				</button>
				<button id="tab-progreso" class="tab-button px-6 py-3 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700">
					üìà Progreso
				</button>
				<button id="tab-historial" class="tab-button px-6 py-3 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700">
					üìã Historial
				</button>
			</div>

			<!-- Tab Content -->
			<div class="p-6">
				<!-- Registro Tab -->
				<div id="registro-content" class="tab-content">
					<AnthropometryForm />
				</div>

				<!-- Progreso Tab -->
				<div id="progreso-content" class="tab-content hidden">
					<ProgressCharts />
				</div>

				<!-- Historial Tab -->
				<div id="historial-content" class="tab-content hidden">
					<div id="history-table-container">
						<div class="text-center py-8 text-gray-500">
							<p class="text-lg mb-2">üìä Sin registros a√∫n</p>
							<p>Comienza registrando tus datos antropom√©tricos</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>

	<!-- JavaScript para funcionalidad -->
	<script>
		import { AnthropometryManager } from '../utils/anthropometry.js';

		document.addEventListener('DOMContentLoaded', function() {
			const anthropometryManager = new AnthropometryManager();
			
			// Initialize tabs
			initializeTabs();
			
			// Load initial data
			loadStatsCards();
			loadHistoryTable();

			function initializeTabs() {
				const tabButtons = document.querySelectorAll('.tab-button');
				const tabContents = document.querySelectorAll('.tab-content');

				tabButtons.forEach(button => {
					button.addEventListener('click', () => {
						const tabId = button.id.replace('tab-', '');
						
						// Update button states
						tabButtons.forEach(btn => {
							btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
							btn.classList.add('border-transparent', 'text-gray-500');
						});
						
						button.classList.add('active', 'border-blue-500', 'text-blue-600');
						button.classList.remove('border-transparent', 'text-gray-500');
						
						// Update content visibility
						tabContents.forEach(content => {
							content.classList.add('hidden');
						});
						
						document.getElementById(`${tabId}-content`).classList.remove('hidden');
						
						// Load specific content based on tab
						if (tabId === 'historial') {
							loadHistoryTable();
						} else if (tabId === 'progreso') {
							loadProgressCharts();
						}
					});
				});
			}

			async function loadStatsCards() {
				try {
					const latestRecord = await anthropometryManager.getLatestRecord();
					
					if (latestRecord) {
						// Update last record date
						const lastRecordCard = document.getElementById('last-record-card');
						const dateSpan = lastRecordCard.querySelector('.stat-value');
						const recordDate = new Date(latestRecord.date);
						const isToday = isDateToday(recordDate);
						dateSpan.textContent = isToday ? 'Hoy' : formatDate(recordDate);
						
						// Update current weight
						if (latestRecord.weight) {
							const weightCard = document.getElementById('current-weight-card');
							const weightSpan = weightCard.querySelector('.stat-value');
							weightSpan.textContent = latestRecord.weight;
						}
						
						// Update BMI
						if (latestRecord.bmi) {
							const bmiCard = document.getElementById('bmi-card');
							const bmiSpan = bmiCard.querySelector('.stat-value');
							bmiSpan.textContent = latestRecord.bmi.toFixed(1);
						}
					}
				} catch (error) {
					console.error('Error loading stats:', error);
				}
			}

			async function loadHistoryTable() {
				try {
					const records = await anthropometryManager.getAllRecords();
					const container = document.getElementById('history-table-container');
					
					if (records.length === 0) {
						container.innerHTML = `
							<div class="text-center py-8 text-gray-500">
								<p class="text-lg mb-2">üìä Sin registros a√∫n</p>
								<p>Comienza registrando tus datos antropom√©tricos</p>
							</div>
						`;
						return;
					}

					const tableHTML = `
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-gray-200">
								<thead class="bg-gray-50">
									<tr>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Peso</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IMC</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
									</tr>
								</thead>
								<tbody class="bg-white divide-y divide-gray-200">
									${records.map(record => `
										<tr>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
												${formatDate(new Date(record.date))}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
												${record.weight ? record.weight + ' kg' : '--'}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
												${record.bmi ? record.bmi.toFixed(1) : '--'}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
												<button onclick="editRecord('${record.id}')" class="text-indigo-600 hover:text-indigo-900 mr-3">Editar</button>
												<button onclick="deleteRecord('${record.id}')" class="text-red-600 hover:text-red-900">Eliminar</button>
											</td>
										</tr>
									`).join('')}
								</tbody>
							</table>
						</div>
					`;
					
					container.innerHTML = tableHTML;
				} catch (error) {
					console.error('Error loading history:', error);
				}
			}

			function loadProgressCharts() {
				// This will be implemented by the ProgressCharts component
				const event = new CustomEvent('loadProgressCharts');
				document.dispatchEvent(event);
			}

			// Utility functions
			function isDateToday(date) {
				const today = new Date();
				return date.toDateString() === today.toDateString();
			}

			function formatDate(date) {
				return date.toLocaleDateString('es-ES', {
					year: 'numeric',
					month: 'short',
					day: 'numeric'
				});
			}

			// Global functions for table actions
			window.editRecord = async function(recordId) {
				try {
					const record = await anthropometryManager.getRecord(recordId);
					if (record) {
						// Switch to registro tab and populate form
						document.getElementById('tab-registro').click();
						
						// Populate form with record data
						const event = new CustomEvent('populateForm', { detail: record });
						document.dispatchEvent(event);
					}
				} catch (error) {
					console.error('Error editing record:', error);
				}
			};

			window.deleteRecord = async function(recordId) {
				if (confirm('¬øEst√°s seguro de que quieres eliminar este registro?')) {
					try {
						await anthropometryManager.deleteRecord(recordId);
						loadHistoryTable();
						loadStatsCards();
						
						// Show success message
						showToast('Registro eliminado correctamente', 'success');
					} catch (error) {
						console.error('Error deleting record:', error);
						showToast('Error al eliminar el registro', 'error');
					}
				}
			};

			// Listen for form submissions to refresh data
			document.addEventListener('anthropometryRecordSaved', () => {
				loadStatsCards();
				loadHistoryTable();
			});
		});

		function showToast(message, type = 'info') {
			// Implementation for toast notifications
			const toast = document.createElement('div');
			toast.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 ${
				type === 'success' ? 'bg-green-500' : 
				type === 'error' ? 'bg-red-500' : 'bg-blue-500'
			}`;
			toast.textContent = message;
			
			document.body.appendChild(toast);
			
			setTimeout(() => {
				toast.remove();
			}, 3000);
		}
	</script>
</Layout>
